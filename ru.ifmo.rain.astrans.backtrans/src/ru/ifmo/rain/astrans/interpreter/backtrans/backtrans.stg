group backtrans;

main(transformation) ::= <<


public class <transformation.name> extends ASTToModelTransformation\<<transformation.resolverClassName>, <transformation.traceClassName>\> {
	<switch(...)>

	public <transformation.name>(ITransformationContextFactory\<<transformation.resolverClassName>, <transformation.traceClassName>\> contextFactory) {
		super(contextFactory);
	}
	
<if (transformation.main)>
	<renderMain(rule=transformation.main)>
<else>
	<renderCustomMain(method=transformation.customMain)>
<endif>	
}
>>

switch(transformation) ::= <<
private final <transformation.switchClassName> transformer = new <transformation.switchClassName>() {
	public void doSwitch(EList target, EList source) {
		for (Iterator i = source.iterator(); i.hasNext(); ) {
			target.add(doSwitch((EObject) i.next()));
		}
	}

	<transformation.mappingRules:toCaseMethod(); separator="\n\n">
};
>>

toCaseMethod(rule) ::= <<
public <rule.result.type> <rule.name>(final <rule.parameter.type> <rule.parameter.name>) {
	final <rule.result.type> <rule.result.name> = <rule.factoryClassName>.eINSTANCE.<rule.factoryMethodName>();
	<if(rule.assignAttributeStatements)>
	
	<rule.assignAttributeStatements:{a | <renderAttributeAssignment(a=a, rule=rule)>}; separator="\n">
	<endif>
	<if(rule.scopeInformationStatements)>

	addCommand(new Runnable() {
		public void run() {
			getResolver().<rule.scopeInformationStatements.enterMethodName>(<rule.parameter.name>, <rule.result.name>);
		}
	});
	<endif>
	<if(rule.assignReferenceStatements)>
	
	<rule.assignReferenceStatements; separator="\n">
	<endif>
	
	getTrace().<rule.writeTraceStatement.traceMethodName>(<rule.parameter.name>, <rule.result.name>);
	<if(rule.scopeInformationStatements)>

	addCommand(new Runnable() {
		public void run() {
			getResolver().<rule.scopeInformationStatements.leaveMethodName>(<rule.parameter.name>, <rule.result.name>);
		}
	});
	
	<endif>
	return <rule.result.name>;
}
>>

renderAttributeAssignment(a, rule) ::= <<
<if(a.many)>
<rule.result.name>.<a.setterName>().addAll(<rule.parameter.name>.<a.getterName>());
<else>
<rule.result.name>.<a.setterName>(<rule.parameter.name>.<a.getterName>());
<endif>
>>

renderResolveObjects(it, rule) ::= <<
addCommand(new Runnable() {
	public void run() {
		<it.resolveObjectStatements:{r | <renderResolveObject(r=r, rule=rule)>}; separator="\n">
	}
});
>>

renderAssignReference(it, rule) ::= <<
<if(it.many)><if(it.mappingNeeded)>
doSwitch(<rule.result.name>.<it.setterName>(), <rule.parameter.name>.<it.getterName>());
<else>
<rule.result.name>.<it.setterName>().addAll(<rule.parameter.name>.<it.getterName>());
<endif>
<else><if(it.mappingNeeded)>
<rule.result.name>.<it.setterName>((<it.type>) doSwitch(<rule.parameter.name>.<it.getterName>()));
<else>
<rule.result.name>.<it.setterName>(<rule.parameter.name>.<it.getterName>());
<endif>
<endif>
>>

renderResolveObject(r, rule) ::= <<
<if(r.many)>
for (Iterator i = <rule.parameter.name>.<r.getterName>().iterator(); i.hasNext(); ) {
	<rule.result.name>.<r.setterName>().add(getResolver().<r.resolverMethodName>((<r.parameterType>) i.next(), <rule.result.name>));
}
<else>
<rule.result.name>.<r.setterName>(getResolver().<r.resolverMethodName>(<rule.parameter.name>.<r.getterName>(), <rule.result.name>));
<endif>
>>

renderMain(rule) ::= <<
public <rule.result.type> run(<rule.parameter.type> <rule.parameter.name>) {
	<rule.result.type> <rule.result.name> = (<rule.result.type>) this.transformer.doSwitch(<rule.parameter.name>);
	performAllCommands();
	return <rule.result.name>;
}
>>

renderCustomMain(method) ::= <<
public <method.result.type> run(<method.parameter.type> <method.parameter.name>) {
	<method.result.type> <method.result.name> = getResolver().<method.resolverMethodName>(<method.parameter.name>, this.transformer);
	performAllCommands();
	return <method.result.name>;
}
>>