@namespace(uri="http://rain.ifmo.ru/~breslav/2007/astransformation", prefix="astransformation")
package astransformation;

interface Named {
  attr String[1] name;
}

interface Typed {
  val ClassName[1] type;
}

abstract class TypeName {
}

class ClassName extends TypeName {
  attr String[1] name;
}

class BasicTypeName extends TypeName {
  attr BasicType type;
}

enum BasicType {
  int = 0;
  byte = 1;
  char = 2;
  short = 3;
  long = 4;
  float = 5;
  double = 6;
  boolean = 7;
}

class Transformation extends Named {
  val MappingRule[*] mappingRules;
  ref MappingRule[0..1] main;
  val CustomMainMethod[0..1] customMain;
  attr String[1] resolverClassName;
  attr String[1] traceClassName;
  val ClassName[1] switchClassName;
}

class Parameter extends Named, Typed {
}

abstract class Method extends Named {
  val Parameter[1] parameter;
  val Parameter[1] result;
}

class CustomMainMethod extends Method {
  attr String[1] resolverMethodName;
}

class MappingRule extends Method {
  val ClassName[1] factoryClassName;
  attr String[1] factoryMethodName;
  val AssignAttribute[*] assignAttributeStatements;
  ordered val AssignReferenceStatement[*] assignReferenceStatements;
  derived transient volatile readonly ref ResolveObject[*] resolveObjectStatements;
  val WriteTrace[1] writeTraceStatement;
  val ScopeInformationStatements[0..1] scopeInformationStatements;
}

class ScopeInformationStatements {
	attr String[1] enterMethodName;
	attr String[1] leaveMethodName;
}

interface AssignReferenceStatement {
}

class ResolveObjects extends AssignReferenceStatement {
  val ResolveObject[1..*] resolveObjectStatements;
}

class AssignFeature {
  attr String[1] setterName;
  attr String[1] getterName;
  attr boolean many = false;
}

class AssignAttribute extends AssignFeature {
}

class AssignReference extends AssignFeature, Typed, AssignReferenceStatement {
  attr boolean mappingNeeded = true;
}

class WriteTrace {
  attr String[1] traceMethodName;
}

class ResolveObject extends AssignFeature, Typed {
  attr String[1] resolverMethodName;
  val TypeName[1] parameterType;
  attr String[1] parameterName;
}

